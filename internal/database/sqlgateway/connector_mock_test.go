// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/sqlgateway/connector.go

// Package sqlgateway is a generated GoMock package.
package sqlgateway

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSQLConnector is a mock of SQLConnector interface.
type MockSQLConnector struct {
	ctrl     *gomock.Controller
	recorder *MockSQLConnectorMockRecorder
}

// MockSQLConnectorMockRecorder is the mock recorder for MockSQLConnector.
type MockSQLConnectorMockRecorder struct {
	mock *MockSQLConnector
}

// NewMockSQLConnector creates a new mock instance.
func NewMockSQLConnector(ctrl *gomock.Controller) *MockSQLConnector {
	mock := &MockSQLConnector{ctrl: ctrl}
	mock.recorder = &MockSQLConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLConnector) EXPECT() *MockSQLConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSQLConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSQLConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSQLConnector)(nil).Close))
}

// Connect mocks base method.
func (m *MockSQLConnector) Connect(ctx context.Context) (*sql.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(*sql.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockSQLConnectorMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSQLConnector)(nil).Connect), ctx)
}

// Timeout mocks base method.
func (m *MockSQLConnector) Timeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockSQLConnectorMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockSQLConnector)(nil).Timeout))
}
