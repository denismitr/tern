// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/sqlgateway/contracts.go

// Package sqlgateway is a generated GoMock package.
package sqlgateway

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockctxExecutor is a mock of ctxExecutor interface.
type MockctxExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockctxExecutorMockRecorder
}

// MockctxExecutorMockRecorder is the mock recorder for MockctxExecutor.
type MockctxExecutorMockRecorder struct {
	mock *MockctxExecutor
}

// NewMockctxExecutor creates a new mock instance.
func NewMockctxExecutor(ctrl *gomock.Controller) *MockctxExecutor {
	mock := &MockctxExecutor{ctrl: ctrl}
	mock.recorder = &MockctxExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockctxExecutor) EXPECT() *MockctxExecutorMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockctxExecutor) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockctxExecutorMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockctxExecutor)(nil).ExecContext), varargs...)
}
